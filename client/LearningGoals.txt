Implementing components that make up the user interface
-- Used Typscript types
-- Used angular interceptors and JWT tokens
-- Used bootstrap for styling
-- Used basic css tricks to enhance the look
-- Used a 3rd party photo gallery tool (Ngx gallery)
-- Used Routing params


Implementing Persistence
-- Angular Template forms
-- Angular CanDeactive Router Guard
-- Angular @ViewChild Decorator
-- Persisting changes to the API
-- Adding loading indicators to the client app
-- Caching data in Angular services

Implementing Photo Upload functionality
-- Photo storage options
-- Adding related entities
-- Using a 3rd party API
-- Using the Debugger 
-- Updating and deleting resources
-- What to return when creating resources in a REST based API

Photo upload control using cloudinary coud services
-- Client uploads photo to API with JWT
-- Server uploads the photo to cloudinary
-- Cloudinary stores the photo and sends a response
-- API saves photo URL and pblic ID to DB


Implementing more advanced forms using Reactive Forms in Angular
-- Use Reactive Forms
-- Use Angular Validation for inputs
-- Implementing custom validators
-- Implementing reusable form controls
-- Working with Date inputs

Implementing paging, sorting, and filtering
-- How to implement pagination on the API and Client
-- Deffered Execution using IQueryable
-- How implement filtering on the API and client
-- How to implement sorting on the API and client
-- Using Action filters
-- Adding a TimeAgo pipe
-- Implement caching in the client for apginated resources
PAGINATION 
- Helps avoid performance problems
- Parameters are passed by query string eg: https://localhost:5001/api/users?pageNumber=1&pageSize=5
- Page size should be limited
- We should always page results
DEFERRED EXECUTION 
example:
IQueryable<User>
var query = context.Users 
    .Where(x => x.Gender == gender)
    .OrderBy(x => x.UserName)
    .Take(5)
    .Skip(5)
    .AsQuaryable()
Nothing executes above
Execution:
query.ToListAsync()
query.ToArrayAsync()
query.ToDictionary()

query.Count()
The codes above is what actually sends a request to our database

